language: cpp
compiler: clang

matrix:
  exclude:
    # Workaround to prevent building in an empty environment
    - compiler: clang
  include:
    ####################### Ubuntu #######################
    ###
    ### Ubuntu 14.04 x86_64, Qt 5.6
    ###
    - os: linux
      dist: trusty
      sudo: required
      env:
        - dist: ubuntu
        - distver: "14.04"
        - arch: x86_64
        - init: /sbin/init
        - qtenv: /opt/qt56/bin/qt56-env.sh
        - qtpkg: "'qt56base qt56quickcontrols qt56quickcontrols2 qt56svg qt56x11extras mesa-common-dev libgl1-mesa-dev'"
        - qtppa: ppa:beineri/opt-qt561-trusty
        - deploy: true
        - deployscript: "'build/deploy.ubuntu.sh -qt'"
    ###
    ### Ubuntu 16.04 x86_64, Qt 5.5
    ###
    - os: linux
      dist: trusty
      sudo: required
      env:
        - dist: ubuntu
        - distver: "16.04"
        - arch: x86_64
        - init: /sbin/init
        - qtpkg: "'qtbase5-dev qtdeclarative5-dev libqt5svg5-dev libqt5x11extras5-dev qtbase5-private-dev'"
        - qmakeopt: "-qt5"
        - deploy: true
        - deployscript: build/deploy.ubuntu.sh
    ####################### OS X #######################
    ###
    ### OS X 10.9 (not built for now)
    ###
    - os: osx
      osx_image: beta-xcode6.2
      env:
        - deploy: true
        - distver: "10.9"
        - distname: "mavericks"
    ###
    ### OS X 10.10
    ###
    - os: osx
      osx_image: xcode6.4
      env:
        - deploy: true
        - distver: "10.10"
        - distname: "yosemite"
    ###
    ### OS X 10.11
    ###
    - os: osx
      osx_image: xcode7.3
      env:
        - deploy: true
        - distver: "10.11"
        - distname: "el-capitan"

services:
  - docker

before_install:
  ### Create aliases for checking variables
  - function run() {
      if [ "$1" = "false" ]; then
        return 0;
      fi;
      shift;
      "$@";
    }
  - export isLinux=$( [[ "$TRAVIS_OS_NAME" == "linux" ]] && echo true || echo false )
  - export isOsX=$( [[ "$TRAVIS_OS_NAME" == "osx" ]] && echo true || echo false )
  - export isUbuntu=$( [[ $isLinux && "${dist}" == "ubuntu" ]] && echo true || echo false )
  - export hasQtEnv=$( [[ -n "${qtenv}" ]] && echo true || echo false )
  - export hasQtPpa=$( [[ $isUbuntu && -n "${qtppa}" ]] && echo true || echo false )
  - export hasQtPkg=$( [[ $isUbuntu && -n "${qtpkg}" ]] && echo true || echo false )
  ### Linux
  - run $isLinux docker pull ${dist}:${distver}
  - run $isLinux export CONTAINER=$(run $isLinux docker run --detach --privileged --volume="${PWD}":/build:rw ${dist}:${distver} ${init})
  - run $isLinux export DOCKER="docker exec -t ${CONTAINER}"
  ### Ubuntu
  - run $hasQtPpa $DOCKER apt-get update
  - run $hasQtPpa $DOCKER apt-get install -y software-properties-common
  - run $hasQtPpa $DOCKER add-apt-repository -y ${qtppa}
  - run $isUbuntu $DOCKER apt-get update
  ### OS X
  - run $isOsX brew untap caskroom/homebrew-cask
  - run $isOsX brew uninstall --force brew-cask
  - run $isOsX brew update
  - run $isOsX brew cleanup
  - run $isOsX brew cask cleanup

install:
  ### Ubuntu
  # Install dependencies
  - run $hasQtPkg $DOCKER apt-get install -y ${qtpkg}
  - run $isUbuntu $DOCKER apt-get install -y lsb-release
  - run $isUbuntu $DOCKER apt-get install -y build-essential
  ### OS X
  ### Install Qt5
  - run $isOsX brew install qt5
  - run $isOsX brew linkapps qt5
  - run $isOsX brew link --force qt5

script:
  - export USER_ID=$(id -u)
  - export GROUP_ID=$(id -g)
  - echo "#!/bin/bash" >> build.sh
  - echo >> build.sh
  - echo "set -x" >> build.sh
  - run $hasQtEnv echo "source ${qtenv}" >> build.sh
  - echo "set -ex" >> build.sh
  - run $isOsX echo "echo \"CONFIG += staticlib\" >> libqtredmine/qtredmine.pro" >> build.sh
  - run $isOsX echo "echo \"CONFIG += staticlib\" >> libredtimer/libredtimer.pro" >> build.sh
  - run $isUbuntu echo "cd /build" >> build.sh
  - echo "qmake ${qmakeopt} -r" >> build.sh
  - echo "make" >> build.sh
  - echo "chown -R ${USER_ID}:${GROUP_ID} ." >> build.sh
  - chmod 755 build.sh
  - run $isUbuntu $DOCKER /build/build.sh
  - run $isOsX ./build.sh

before_deploy:
  - test $TRAVIS_TEST_RESULT = 0
  ### The following commands have to define a $DEPLOYFILE
  # Ubuntu
  - run $isUbuntu export VERSION="redtimer-${TRAVIS_TAG}-${dist}-${distver}-${arch}"
  - run $isUbuntu export DEPLOYFILE="${VERSION}.tar.bz2"
  - run $isUbuntu echo "#!/bin/bash" >> deploy.sh
  - run $isUbuntu echo "set -ex" >> deploy.sh
  - run $isUbuntu echo "cd /build" >> deploy.sh
  - run $isUbuntu echo "${deployscript} ${VERSION}" >> deploy.sh
  - run $isUbuntu echo "chown -R $USER_ID:$GROUP_ID ." >> deploy.sh
  - run $isUbuntu chmod 755 deploy.sh
  - run $isUbuntu $DOCKER /build/deploy.sh
  # OS X
  - run $isOsX export DEPLOYFILE=redtimer-${TRAVIS_TAG}-osx-${distver}-${distname}.dmg
  - run $isOsX cd client
  - run $isOsX macdeployqt RedTimerClient.app -appstore-compliant -qmldir=qml
  - run $isOsX export QTDIR=$(brew info qt5 | grep "^/usr/local/Cellar/qt5" | cut -f 1 -d " ")
  - run $isOsX cp -a $QTDIR/plugins/{bearer,iconengines} RedTimerClient.app/Contents/PlugIns
  - run $isOsX python ../build/macdeployqtfix/macdeployqtfix.py RedTimerClient.app/Contents/MacOS/RedTimerClient $QTDIR/
  # Thanks to https://medium.com/juan-cruz-viotti/how-to-code-sign-os-x-electron-apps-in-travis-ci-6b6a0756c04a#.x84x807hk
  - run $isOsX export CERTIFICATE_P12=Certificate.p12
  - run $isOsX echo $CERTIFICATE_OSX_P12 | base64 â€” decode > $CERTIFICATE_P12
  - run $isOsX export KEYCHAIN=build.keychain
  - run $isOsX security create-keychain -p mysecretpassword $KEYCHAIN
  - run $isOsX security default-keychain -s $KEYCHAIN
  - run $isOsX security unlock-keychain -p mysecretpassword $KEYCHAIN
  - run $isOsX security import $CERTIFICATE_P12 -k $KEYCHAIN -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign
  - run $isOsX codesign --deep --force --verbose --sign $CERTIFICATE_P12 RedTimerClient.app
  # Thanks to https://asmaloney.com/2013/07/howto/packaging-a-mac-os-x-application-using-a-dmg
  - run $isOsX hdiutil create -fs HFS+ -fsargs "-c c=64,a=16,e=16" -format UDRW -srcfolder RedTimerClient.app -volname RedTimerClient tmp.dmg
  - run $isOsX export DEVICE=$(hdiutil attach -readwrite -noverify tmp.dmg | egrep '^/dev/' | sed 1q | awk '{print $1}')
  - run $isOsX pushd /Volumes/RedTimerClient
  - run $isOsX ln -s /Applications
  - run $isOsX popd
  - run $isOsX sync
  - run $isOsX hdiutil detach "${DEVICE}"
  - run $isOsX hdiutil convert tmp.dmg -format UDZO -imagekey zlib-level=9 -o RedTimerClient.dmg
  - run $isOsX mv RedTimerClient.dmg $DEPLOYFILE

deploy:
  provider: releases
  api_key:
    secure: F3wBYR8oHwrLEJWwH6eQbTjhrNFCdklUQhjfq4wzixZO3bm5PTR/K3wvxaINmhsSoEdYHnSwzyVC3kWzcKWQX/3msCV4VyLvo1SULoz3RA2f4iY63Kbo0KzKiT+2rmOuGNHDDXCvIVKIhD81H5hR5YYhTPF7aBGfxvpb1Z2l9zfASP7fd6oZhdxolNfT3OS03AIB1on6pLgtv/aaizh5vAlVn32OwyFiJ5iOo+owFvYgImj082YTN025tVUh9KMjWD5naLgQ5ltflcWnIndjOwnasHQesmSKmCU5TBB7gAjpaRt0zKNdgDZ2RS8UFmaV5BIzF6TgP3I/IsVET5Fqqjil8PUSJZrGm/fbL+8yp9tpQ5chQcTV/ssYoQPZ0I2asZjuV6ypgSCIVuCdzcUewZgkLJglfKKTf1WqxKsjleaTZu9HpCyZ+XYp5L2Y+twsFZGgzYZoa43+/GtinNabNG75rIq0mc3cnNM/BQRvyUeAf9JUGeauQhTjJloiSKs3wl3VVYtvCiggWmKEjPYDNqgDLMaw10WMLt55f+i1VwzcBtRyZOkBC0/YVKLrM21JGOgbgEBtTam5G9+0Ysb6bwymTTD02N6tXjLFS9om2UyN1LzGzW+Sy0PW4L8RhoafwZEVTMDwxZh6Noo8JTZAN/XmOPM7cGfavVZchn2CWZc=
  file_glob: true
  file: ${DEPLOYFILE}
  skip_cleanup: true
  on:
    repo: fathomssen/redtimer
    condition: -n "${deploy}"
    tags: true
