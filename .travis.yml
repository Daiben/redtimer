language: cpp
compiler: clang

matrix:
  exclude:
    # Workaround to prevent building in an empty environment
    - compiler: clang
  include:
#    ####################### Ubuntu #######################
#    ###
#    ### Ubuntu 14.04
#    ###
#    ### Ubuntu 14.04 x86_64, Qt 5.5 - DO NOT DEPLOY
#    - os: linux
#      dist: trusty
#      sudo: required
#      env:
#        - dist: ubuntu
#        - distver: "14.04"
#        - init: /sbin/init
#        - qtenv: /opt/qt55/bin/qt55-env.sh
#        - qtpkg: "'qt55base qt55quickcontrols qt55svg mesa-common-dev libgl1-mesa-dev'"
#        - qtppa: ppa:beineri/opt-qt551-trusty
#    ### Ubuntu 14.04 x86_64, Qt 5.6 - DEPLOY
#    - os: linux
#      dist: trusty
#      sudo: required
#      env:
#        - dist: ubuntu
#        - distver: "14.04"
#        - init: /sbin/init
#        - qtenv: /opt/qt56/bin/qt56-env.sh
#        - qtpkg: "'qt56base qt56quickcontrols qt56quickcontrols2 qt56svg mesa-common-dev libgl1-mesa-dev'"
#        - qtppa: ppa:beineri/opt-qt56-trusty
#        - deploy: true
#        - deployscript: "'build/deploy.ubuntu.sh -qt'"
#    ### Ubuntu 14.04 i386, Qt 5.5 - DO NOT DEPLOY
#    - os: linux
#      dist: trusty
#      sudo: required
#      env:
#        - dist: ubuntu
#        - distver: "14.04"
#        - arch: i386
#        - init: /sbin/init
#        - qtenv: /opt/qt55/bin/qt55-env.sh
#        - qtpkg: "'qt55base qt55quickcontrols qt55svg mesa-common-dev libgl1-mesa-dev'"
#        - qtppa: ppa:beineri/opt-qt551-trusty
#    ### Ubuntu 14.04 i386, Qt 5.6 - DEPLOY
#    - os: linux
#      dist: trusty
#      sudo: required
#      env:
#        - dist: ubuntu
#        - distver: "14.04"
#        - arch: i386
#        - init: /sbin/init
#        - qtenv: /opt/qt56/bin/qt56-env.sh
#        - qtpkg: "'qt56base qt56quickcontrols qt56quickcontrols2 qt56svg mesa-common-dev libgl1-mesa-dev'"
#        - qtppa: ppa:beineri/opt-qt56-trusty
#        - deploy: true
#        - deployscript: "'build/deploy.ubuntu.sh -qt'"
#    ###
#    ### Ubuntu 15.10
#    ###
#    ### Ubuntu 15.10 x86_64, Qt 5.5 - DEPLOY
#    - os: linux
#      dist: trusty
#      sudo: required
#      env:
#        - dist: ubuntu
#        - distver: "15.10"
#        - init: /sbin/init
#        - qtpkg: "'qtbase5-dev qtdeclarative5-dev libqt5svg5-dev qtdeclarative5-controls-plugin libqt5libqgtk2'"
#        - qmakeopt: "-qt5"
#        - qtppa: ppa:canonical-qt5-edgers/backup-qt551
#        - deploy: true
#        - deployscript: "'build/deploy.ubuntu.sh -qt'"
#    ### Ubuntu 15.10 i386, Qt 5.5 - DEPLOY
#    - os: linux
#      dist: trusty
#      sudo: required
#      env:
#        - dist: ubuntu
#        - distver: "15.10"
#        - arch: i386
#        - init: /sbin/init
#        - qtpkg: "'qtbase5-dev qtdeclarative5-dev libqt5svg5-dev qtdeclarative5-controls-plugin libqt5libqgtk2'"
#        - qmakeopt: "-qt5"
#        - qtppa: ppa:canonical-qt5-edgers/backup-qt551
#        - deploy: true
#        - deployscript: "'build/deploy.ubuntu.sh -qt'"
#    ###
#    ### Ubuntu 16.04
#    ###
#    ### Ubuntu 16.04 x86_64, Qt 5.5 - DEPLOY
#    - os: linux
#      dist: trusty
#      sudo: required
#      env:
#        - dist: ubuntu
#        - distver: "16.04"
#        - init: /sbin/init
#        - qtpkg: "'qtbase5-dev qtdeclarative5-dev libqt5svg5-dev'"
#        - qmakeopt: "-qt5"
#        - deploy: true
#        - deployscript: build/deploy.ubuntu.sh
#    ### Ubuntu 16.04 i386, Qt 5.5 - DEPLOY
#    - os: linux
#      dist: trusty
#      sudo: required
#      env:
#        - dist: ubuntu
#        - distver: "16.04"
#        - arch: i386
#        - init: /sbin/init
#        - qtpkg: "'qtbase5-dev qtdeclarative5-dev libqt5svg5-dev'"
#        - qmakeopt: "-qt5"
#        - deploy: true
#        - deployscript: build/deploy.ubuntu.sh
    ####################### OS X #######################
    ###
    ### OS X 10.11
    ###
    - os: osx
      osx_image: xcode7.3
      env:
        - deploy: true

services:
  - docker

before_install:
  ### Create aliases for checking variables
  - function run() {
      if [ "$1" = "false" ]; then
        return 0;
      fi;
      shift;
      "$@";
    }
  - export isLinux=$( [[ "$TRAVIS_OS_NAME" == "linux" ]] && echo true || echo false )
  - export isOsX=$( [[ "$TRAVIS_OS_NAME" == "osx" ]] && echo true || echo false )
  - export isUbuntu=$( [[ isLinux && "${dist}" == "ubuntu" ]] && echo true || echo false )
  - export isUbuntu386=$( [[ isUbuntu && "${arch}" == "i386" ]] && echo true || echo false )
  - export hasQtEnv=$( [[ -n "${qtenv}" ]] && echo true || echo false )
  - export hasQtPpa=$( [[ isUbuntu && -n "${qtppa}" ]] && echo true || echo false )
  - export hasQtPkg=$( [[ isUbuntu && -n "${qtpkg}" ]] && echo true || echo false )
  ### Linux
  - run $isLinux docker pull ${dist}:${distver}
  - run $isLinux export CONTAINER=$(run $isLinux docker run --detach --privileged --volume="${PWD}":/build:rw ${dist}:${distver} ${init})
  - run $isLinux export DOCKER="docker exec --tty ${CONTAINER} env TERM=xterm"
  ### Ubuntu
  - run $isUbuntu $DOCKER apt-get update
  - run $isUbuntu $DOCKER apt-get install -y pbuilder debootstrap devscripts
  - run $isUbuntu386 export ARCH="--debootstrapopts --arch --debootstrapopts i386"
  - run $isUbuntu386 export LINUX32="linux32"
  - run $isUbuntu $DOCKER $LINUX32 pbuilder create --debootstrapopts --variant=buildd $ARCH
  ### OS X
  - run $isOsX brew update

install:
  ### Ubuntu
  # Install dependencies in build chroot
  # sources.list will be in Docker:/build and chroot:/root
  - run $isUbuntu $DOCKER cp /etc/apt/sources.list /build
  - run $isUbuntu touch prepare.sh
  - run $isUbuntu chmod 755 prepare.sh
  - run $isUbuntu echo "#!/bin/bash" >> prepare.sh
  - run $isUbuntu echo >> prepare.sh
  - run $isUbuntu echo "set -ex" >> prepare.sh
  - run $isUbuntu echo "cp /build/sources.list /etc/apt" >> prepare.sh
  - run $isUbuntu echo "apt-get update" >> prepare.sh
  - run $hasQtPpa echo "apt-get install -y software-properties-common" >> prepare.sh
  - run $hasQtPpa echo "add-apt-repository -y ${qtppa}" >> prepare.sh
  - run $isUbuntu echo "apt-get update" >> prepare.sh
  - run $isUbuntu echo "apt-get dist-upgrade -y" >> prepare.sh
  - run $hasQtPkg echo "apt-get install -y ${qtpkg}" >> prepare.sh
  - run $isUbuntu echo "apt-get install -y lsb-release" >> prepare.sh
  - run $isUbuntu $DOCKER $LINUX32 pbuilder --execute --bindmounts "/build" --save-after-exec /build/prepare.sh
  ### OS X
  ### Install Qt5
  - run $isOsX brew install qt5
  - run $isOsX brew linkapps qt5
  - run $isOsX brew link --force qt5

script:
  - export USER_ID=$(id -u)
  - export GROUP_ID=$(id -g)
  - touch build.sh
  - chmod 755 build.sh
  - echo "#!/bin/bash" >> build.sh
  - echo >> build.sh
  - echo "set -x" >> build.sh
  - run $hasQtEnv echo "source ${qtenv}" >> build.sh
  - echo "set -ex" >> build.sh
  - run $isUbuntu echo "cd /build" >> build.sh
  - echo "cd qtredmine" >> build.sh
  - run $isOsX echo "echo 'CONFIG+=staticlib' >> qtredmine.pro" >> build.sh
  - echo "qmake ${qmakeopt} -r" >> build.sh
  - echo "make" >> build.sh
  - echo "cd .." >> build.sh
  - echo "qmake ${qmakeopt} -r" >> build.sh
  - run $isOsX echo "sed -i 's#-lqtredmine#qtredmine/libqtredmine.a#'" >> build.sh
  - echo "make" >> build.sh
  - echo "chown -R ${USER_ID}:${GROUP_ID} ." >> build.sh
  - run $isUbuntu $DOCKER $LINUX32 pbuilder --execute --bindmounts "/build" /build/build.sh
  - run $isOsX ./build.sh
  # @todo Move to before_deploy
  - run $isOsX cp -av qtredmine/libqtredmine* .
  - run $isOsX macdeployqt RedTimer.app -dmg -verbose=3
  - run $isOsX export DEPLOYFILE=RedTimer.dmg

before_deploy:
  - test $TRAVIS_TEST_RESULT = 0
  ### The following commands have to define a $DEPLOYFILE
  # Ubuntu
  - run $isUbuntu echo "#!/bin/bash" >> deploy.sh
  - run $isUbuntu echo "set -ex" >> deploy.sh
  - run $isUbuntu echo "cd /build" >> deploy.sh
  - run $isUbuntu echo "${deployscript} > .deployfile" >> deploy.sh
  - run $isUbuntu echo "chown -R $USER_ID:$GROUP_ID ." >> deploy.sh
  - run $isUbuntu $DOCKER $LINUX32 pbuilder --execute --bindmounts "/build" /build/deploy.sh
  - run $isUbuntu export DEPLOYFILE=$(run $isUbuntu cat .deployfile | tr -d '\r\n')
  # OS X
  - run $isOsX cp -av qtredmine/libqtredmine* /usr/local/lib
  - run $isOsX macdeployqt RedTimer.app -dmg -verbose=3
  - run $isOsX export DEPLOYFILE=RedTimer.dmg

deploy:
  provider: releases
  api_key:
    secure: F3wBYR8oHwrLEJWwH6eQbTjhrNFCdklUQhjfq4wzixZO3bm5PTR/K3wvxaINmhsSoEdYHnSwzyVC3kWzcKWQX/3msCV4VyLvo1SULoz3RA2f4iY63Kbo0KzKiT+2rmOuGNHDDXCvIVKIhD81H5hR5YYhTPF7aBGfxvpb1Z2l9zfASP7fd6oZhdxolNfT3OS03AIB1on6pLgtv/aaizh5vAlVn32OwyFiJ5iOo+owFvYgImj082YTN025tVUh9KMjWD5naLgQ5ltflcWnIndjOwnasHQesmSKmCU5TBB7gAjpaRt0zKNdgDZ2RS8UFmaV5BIzF6TgP3I/IsVET5Fqqjil8PUSJZrGm/fbL+8yp9tpQ5chQcTV/ssYoQPZ0I2asZjuV6ypgSCIVuCdzcUewZgkLJglfKKTf1WqxKsjleaTZu9HpCyZ+XYp5L2Y+twsFZGgzYZoa43+/GtinNabNG75rIq0mc3cnNM/BQRvyUeAf9JUGeauQhTjJloiSKs3wl3VVYtvCiggWmKEjPYDNqgDLMaw10WMLt55f+i1VwzcBtRyZOkBC0/YVKLrM21JGOgbgEBtTam5G9+0Ysb6bwymTTD02N6tXjLFS9om2UyN1LzGzW+Sy0PW4L8RhoafwZEVTMDwxZh6Noo8JTZAN/XmOPM7cGfavVZchn2CWZc=
  file_glob: true
  file: ${DEPLOYFILE}
  skip_cleanup: true
  on:
    repo: fathomssen/redtimer
    condition: -n "${deploy}"
    tags: true
